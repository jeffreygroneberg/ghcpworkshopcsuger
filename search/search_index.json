{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to GitHub Copilot Workshop! \ud83d\ude80","text":"<p>Welcome to our comprehensive GitHub Copilot workshop! This interactive guide will help you explore the powerful capabilities of GitHub Copilot and learn how to leverage AI-assisted coding to enhance your development workflow.</p>"},{"location":"#what-is-github-copilot","title":"What is GitHub Copilot? \u2728","text":"<p>GitHub Copilot is an AI pair programmer that helps you write better code faster. It draws context from comments and code to suggest individual lines and whole functions instantly. GitHub Copilot is powered by OpenAI's Codex, a generative pretrained language model that has been trained on a vast corpus of text and code.</p>"},{"location":"#what-youll-learn","title":"What You'll Learn \ud83d\udcda","text":"<p>Throughout this workshop, you'll:</p> <ul> <li>Understand how GitHub Copilot works and its capabilities</li> <li>Learn best practices for working with AI-assisted coding</li> <li>Explore various programming languages and scenarios</li> <li>Complete hands-on exercises to reinforce your learning</li> <li>Discover tips and tricks to maximize your productivity</li> </ul>"},{"location":"#workshop-structure","title":"Workshop Structure \ud83d\uddc2\ufe0f","text":"<p>This workshop is designed to be flexible and can be completed in either a 2-hour or 4-hour format. The content is organized into:</p> <ol> <li>Introduction and Setup: Get familiar with GitHub Copilot and ensure your environment is properly configured</li> <li>Hands-on Labs: Practice using GitHub Copilot with various programming languages and scenarios</li> <li>Advanced Topics: Explore more complex use cases and techniques</li> </ol>"},{"location":"#getting-started","title":"Getting Started \ud83c\udfc1","text":"<p>To make the most of this workshop:</p> <ol> <li>Ensure you have a GitHub account with GitHub Copilot access</li> <li>Have a compatible code editor installed (VS Code recommended)</li> <li>Follow the hands-on labs in sequence for the best learning experience</li> </ol> <p>Ready to supercharge your coding with AI? Let's dive in! \ud83c\udfca\u200d\u2642\ufe0f</p> <p></p>"},{"location":"future-roadmap/","title":"Future Roadmap of GitHub Copilot \ud83d\ude80","text":"<p>GitHub Copilot is continuously evolving, with new features and capabilities being added regularly. This chapter explores the exciting future roadmap of GitHub Copilot and what developers can expect in the coming months and years.</p>"},{"location":"future-roadmap/#current-state-of-github-copilot","title":"Current State of GitHub Copilot \ud83d\udcca","text":"<p>Before diving into the future, let's briefly recap where GitHub Copilot stands today:</p> <ul> <li>Code Completion: Suggests code as you type, completing lines or entire functions</li> <li>Natural Language Understanding: Converts comments into functional code</li> <li>Multi-Language Support: Works across numerous programming languages</li> <li>IDE Integration: Available in popular editors like VS Code, Visual Studio, JetBrains IDEs, and more</li> <li>GitHub Copilot Chat: Provides conversational AI assistance for coding questions</li> <li>Context Awareness: Understands your project's context to provide relevant suggestions</li> </ul>"},{"location":"future-roadmap/#near-term-roadmap-6-12-months","title":"Near-Term Roadmap (6-12 Months) \ud83d\udd2e","text":""},{"location":"future-roadmap/#enhanced-context-understanding","title":"Enhanced Context Understanding \ud83e\udde0","text":"<ul> <li>Improved Repository-Wide Context: Better understanding of your entire codebase, not just the current file</li> <li>Semantic Code Analysis: Deeper understanding of code meaning and intent</li> <li>Cross-File Refactoring: Suggest changes across multiple files to improve code quality</li> </ul>"},{"location":"future-roadmap/#advanced-collaboration-features","title":"Advanced Collaboration Features \ud83d\udc65","text":"<ul> <li>Team-Based Learning: Copilot will learn from your team's coding patterns and preferences</li> <li>Code Review Assistance: Automated suggestions for code reviews</li> <li>Collaborative Coding: Real-time AI assistance during pair programming sessions</li> </ul>"},{"location":"future-roadmap/#expanded-language-and-framework-support","title":"Expanded Language and Framework Support \ud83c\udf10","text":"<ul> <li>Specialized Framework Knowledge: Deeper understanding of popular frameworks</li> <li>Domain-Specific Suggestions: Tailored recommendations for specific industries or domains</li> <li>New Language Support: Expanding to cover more programming languages and technologies</li> </ul>"},{"location":"future-roadmap/#medium-term-roadmap-1-2-years","title":"Medium-Term Roadmap (1-2 Years) \ud83c\udf31","text":""},{"location":"future-roadmap/#ai-driven-architecture-assistance","title":"AI-Driven Architecture Assistance \ud83c\udfd7\ufe0f","text":"<ul> <li>System Design Suggestions: Help with designing software architecture</li> <li>Pattern Recognition: Identify and suggest architectural patterns</li> <li>Performance Optimization: Recommendations for improving code efficiency</li> </ul>"},{"location":"future-roadmap/#advanced-testing-capabilities","title":"Advanced Testing Capabilities \ud83e\uddea","text":"<ul> <li>Test Generation: Automatically generate comprehensive test suites</li> <li>Edge Case Detection: Identify potential edge cases in your code</li> <li>Test Coverage Analysis: Suggest tests to improve coverage</li> </ul>"},{"location":"future-roadmap/#security-and-compliance","title":"Security and Compliance \ud83d\udd12","text":"<ul> <li>Security Vulnerability Detection: Identify potential security issues in real-time</li> <li>Compliance Checking: Ensure code meets industry standards and regulations</li> <li>Best Practice Enforcement: Suggestions to align with security best practices</li> </ul>"},{"location":"future-roadmap/#long-term-vision-2-years","title":"Long-Term Vision (2+ Years) \ud83d\udd2d","text":""},{"location":"future-roadmap/#autonomous-code-generation","title":"Autonomous Code Generation \ud83e\udd16","text":"<ul> <li>Full Feature Implementation: Generate entire features from high-level descriptions</li> <li>Self-Improving Code: Suggestions that evolve based on runtime performance</li> <li>Autonomous Debugging: Identify and fix bugs with minimal human intervention</li> </ul>"},{"location":"future-roadmap/#natural-language-programming","title":"Natural Language Programming \ud83d\udcac","text":"<ul> <li>Conversational Development: Build software through natural conversations</li> <li>Requirements to Code: Transform business requirements directly into working code</li> <li>Documentation Generation: Create comprehensive documentation from code</li> </ul>"},{"location":"future-roadmap/#cross-platform-intelligence","title":"Cross-Platform Intelligence \ud83d\udcf1","text":"<ul> <li>Multi-Platform Optimization: Suggestions optimized for various platforms and devices</li> <li>Adaptive UI Generation: Create user interfaces that adapt to different devices</li> <li>Cross-Platform Testing: Ensure code works consistently across platforms</li> </ul>"},{"location":"future-roadmap/#ethical-considerations-and-challenges","title":"Ethical Considerations and Challenges \ud83e\udd14","text":"<p>As GitHub Copilot evolves, several important considerations will shape its development:</p>"},{"location":"future-roadmap/#ethical-ai-development","title":"Ethical AI Development \ud83c\udf1f","text":"<ul> <li>Bias Mitigation: Ongoing efforts to reduce bias in code suggestions</li> <li>Transparency: Clear communication about how suggestions are generated</li> <li>User Control: Ensuring developers maintain control over their code</li> </ul>"},{"location":"future-roadmap/#technical-challenges","title":"Technical Challenges \ud83e\udde9","text":"<ul> <li>Computational Efficiency: Balancing suggestion quality with performance</li> <li>Context Window Limitations: Expanding the amount of code Copilot can consider</li> <li>Integration Complexity: Seamless integration with diverse development environments</li> </ul>"},{"location":"future-roadmap/#industry-impact","title":"Industry Impact \ud83c\udf0d","text":"<ul> <li>Developer Productivity: Measuring and maximizing productivity gains</li> <li>Skill Development: Ensuring Copilot enhances rather than replaces developer skills</li> <li>Economic Effects: Understanding the broader impact on the software industry</li> </ul>"},{"location":"future-roadmap/#how-to-stay-updated","title":"How to Stay Updated \ud83d\udce1","text":"<p>To keep up with GitHub Copilot's evolving capabilities:</p> <ol> <li>GitHub Blog: Follow the GitHub Blog for official announcements</li> <li>Release Notes: Check Copilot's release notes in your IDE</li> <li>GitHub Changelog: Review the GitHub Changelog for updates</li> <li>GitHub Next: Explore GitHub Next for experimental features</li> <li>Community Forums: Participate in GitHub Copilot discussions</li> </ol>"},{"location":"future-roadmap/#preparing-for-the-future","title":"Preparing for the Future \ud83c\udf08","text":"<p>As GitHub Copilot continues to evolve, developers can prepare by:</p> <ul> <li>Embracing AI Collaboration: View AI as a collaborative partner rather than a replacement</li> <li>Focusing on High-Level Skills: Develop skills in architecture, design, and problem-solving</li> <li>Providing Quality Feedback: Help improve Copilot by providing feedback on suggestions</li> <li>Staying Adaptable: Be ready to incorporate new AI capabilities into your workflow</li> <li>Ethical Consideration: Think critically about how and when to use AI-generated code</li> </ul> <p>The future of GitHub Copilot promises to transform how we write code, making development more accessible, efficient, and creative. By understanding the roadmap and preparing for these changes, developers can make the most of this powerful AI assistant! \ud83d\ude80</p>"},{"location":"model-comparison/","title":"AI Model Comparison for GitHub Copilot \ud83e\udde0","text":"<p>This guide provides a comparison of different AI models that power GitHub Copilot, helping you understand their capabilities, strengths, and limitations.</p>"},{"location":"model-comparison/#model-comparison-table","title":"Model Comparison Table \ud83d\udcca","text":"Model Best Use Cases Context Window Response Speed Accuracy &amp; Reasoning Key Strengths Limitations GPT-3.5 Turbo - Quick code suggestions- Simple completions- Routine tasks ~16k tokens Very fast Good for common patterns and standard code - Extremely responsive- Low latency- Efficient for routine coding - Less nuanced understanding- May struggle with complex logic- Limited context window GPT-4o - Complex coding tasks- Debugging- Architecture suggestions ~128k tokens Moderate High accuracy across languages and frameworks - Balanced speed/quality- Strong reasoning- Good at explaining code - Higher resource usage- Occasional over-generation- May be slower than GPT-3.5 OpenAI O1 - Deep problem-solving- Advanced debugging- Complex algorithms ~128k tokens Slower Exceptional in solving highly intricate logicCan reason step by step in a \"thinking\" mode - Extremely thorough- Great for advanced debugging- Chain-of-thought for tough problems - High latency- Often limited usage quotas- May \"over-explain\" or produce verbose solutions OpenAI O3-mini - Coding-focused tasks- Ideal for typical dev workflows ~200k tokens (input) Almost as fast as GPT-3.5(optimized for code) Very high accuracy in coding benchmarks, surpassing O1 for standard tasks - Purpose-built for generating &amp; refining code- Balances speed + quality- Large context window - Possibly less \"general knowledge\" than GPT-4- High-resource usage if extremely large context is provided Anthropic Claude 3.5 - General coding- Large codebase comprehension- Quick Q&amp;A ~100k\u2013200k tokens Fast in most scenarios(significantly faster than O1) Very accurate on tasks like function implementation &amp; debuggingScores very high on coding benchmarks - Often provides well-structured, production-ready code- Strong large-context handling- Good explanations - Might need targeted prompts for extremely specialized frameworks- Tends to produce longer textual responses Anthropic Claude 3.7 - Similar to 3.5 but more refined- Optional \"Thinking Mode\" ~100k\u2013200k tokens Generally fast(slightly slower in \"Thinking Mode\") On par with or better than Claude 3.5 in correctnessGood for iterative improvements &amp; multi-step tasks - Supports agent-like advanced reasoning- Can handle in-depth queries- Large context window - Variations in output style if \"Thinking Mode\" is enabled- Still slower than GPT-3.5 for trivial tasks Google Gemini 2.0 \"Flash\" - Enterprise-scale dev tasks- Massive codebases- Refactoring, performance tuning Up to ~1M tokens Optimized for low latency(can handle huge contexts with minimal slowdown) Highly promising accuracy (on par with GPT-4) \u2013 excels in code, math, &amp; logic(official benchmarks pending release) - Enormous context window for entire projects- Good synergy with Google ecosystem- Strong code optimization - Actual performance metrics still emerging- Potentially high resource overhead for extremely large prompts"},{"location":"model-comparison/#quick-tips-on-model-selection","title":"Quick Tips on Model Selection \ud83d\udca1","text":"<ol> <li> <p>Everyday Speed &amp; Simplicity? \ud83c\udfce\ufe0f    Stick to GPT-3.5 Turbo or O3-mini for near real-time code suggestions on routine tasks.</p> </li> <li> <p>Balanced Performance for Complex Needs? \u2696\ufe0f GPT-4o or Claude 3.5/3.7 offer a strong combination of high accuracy, large context, and reasonable speed.</p> </li> <li> <p>Deep Problem-Solving &amp; Debugging? \ud83d\udd0d OpenAI O1 (or O3-mini for coding-specific tasks) can handle intricate logic and step-by-step reasoning. Just be prepared for higher latency or usage limits.</p> </li> <li> <p>Massive Contexts or Enterprise Projects? \ud83c\udfe2 Claude 3.5/3.7 and Google Gemini both feature enormous context windows (100k+ tokens), with Gemini Flash supporting up to 1M tokens.</p> </li> <li> <p>Model Switching \ud83d\udd04  </p> </li> <li>It is often beneficial to switch models for specialized tasks (e.g., from GPT-4o to O1 for advanced debugging).  </li> <li>Be aware of usage limits (especially for O1/O3-mini).  </li> <li>Complex tasks may be slower on thorough models; use faster ones for routine completions.</li> </ol>"},{"location":"model-comparison/#references","title":"References \ud83d\udcda","text":"<p>Below are some official product pages and announcements, which you can consult for more details and the latest updates:</p> <ol> <li>GitHub Copilot </li> <li>Documentation: https://docs.github.com/en/copilot </li> <li> <p>Blog (Updates &amp; Announcements): https://github.blog/</p> </li> <li> <p>OpenAI </p> </li> <li>GPT-3.5 &amp; GPT-4: https://openai.com/blog/ </li> <li> <p>Model Cards &amp; Docs: https://platform.openai.com/docs/models</p> </li> <li> <p>Anthropic Claude </p> </li> <li>Official Site: https://www.anthropic.com/index/introducing-claude </li> <li> <p>Release Announcements: https://www.anthropic.com/index/blog</p> </li> <li> <p>Google Gemini </p> </li> <li>Google Cloud AI Blog: https://cloud.google.com/blog/products/ai-machine-learning </li> <li>News &amp; Releases: https://developers.googleblog.com/</li> </ol> <p>Disclaimer: The content here is for informational purposes only and based on available documentation and reports as of early 2025. Actual performance, quota limits, and feature sets may evolve over time.</p>"},{"location":"rag-extension-lab/","title":"Building a RAG Extension for GitHub Copilot Chat \ud83e\udd16\ud83d\udcac","text":"<p>This hands-on lab will guide you through building a Retrieval-Augmented Generation (RAG) extension for GitHub Copilot Chat. This extension will enhance Copilot's capabilities by allowing it to access and leverage your own documentation or knowledge base.</p>"},{"location":"rag-extension-lab/#lab-overview","title":"Lab Overview \ud83d\udccb","text":"<p>Duration: 1-2 hours Difficulty: Advanced Prerequisites:  - Familiarity with GitHub Copilot - Basic understanding of RAG systems - Experience with JavaScript/TypeScript - VS Code installed with GitHub Copilot extension</p>"},{"location":"rag-extension-lab/#what-is-rag","title":"What is RAG? \ud83e\udde9","text":"<p>Retrieval-Augmented Generation (RAG) is an AI framework that enhances large language models by: 1. Retrieving relevant information from external knowledge sources 2. Augmenting the model's prompts with this retrieved information 3. Generating more accurate, up-to-date, and contextually relevant responses</p> <p>This approach helps overcome limitations of pre-trained models by providing them with current, domain-specific information.</p>"},{"location":"rag-extension-lab/#why-build-a-rag-extension-for-github-copilot","title":"Why Build a RAG Extension for GitHub Copilot? \ud83c\udfaf","text":"<p>GitHub Copilot is incredibly powerful, but it has some limitations: - It may not have knowledge of your specific codebase or documentation - Its training data has a cutoff date, so it lacks information about newer technologies - It doesn't have direct access to your organization's best practices or internal libraries</p> <p>By building a RAG extension, you can: - Connect Copilot to your own documentation - Provide context-specific suggestions based on your codebase - Ensure recommendations follow your organization's coding standards - Improve the relevance and accuracy of Copilot's suggestions</p>"},{"location":"rag-extension-lab/#what-youll-build","title":"What You'll Build \ud83c\udfd7\ufe0f","text":"<p>In this lab, you'll create a VS Code extension that: 1. Indexes your project documentation or specified knowledge base 2. Creates embeddings for efficient semantic search 3. Intercepts GitHub Copilot Chat queries 4. Retrieves relevant information from your knowledge base 5. Augments Copilot's responses with this information</p>"},{"location":"rag-extension-lab/#getting-started","title":"Getting Started \ud83d\ude80","text":""},{"location":"rag-extension-lab/#step-1-set-up-your-development-environment","title":"Step 1: Set Up Your Development Environment","text":"<p>First, you'll need to set up your development environment for creating VS Code extensions:</p> <pre><code># Install Yeoman and VS Code Extension Generator\nnpm install -g yo generator-code\n\n# Create a new extension project\nyo code\n\n# Select 'New Extension (TypeScript)'\n# Fill in the required information\n</code></pre>"},{"location":"rag-extension-lab/#step-2-install-required-dependencies","title":"Step 2: Install Required Dependencies","text":"<p>Add the necessary dependencies for building the RAG extension:</p> <pre><code># Navigate to your extension directory\ncd your-extension-name\n\n# Install dependencies\nnpm install @vscode/vscode-languagedetection\nnpm install langchain\nnpm install openai\n</code></pre>"},{"location":"rag-extension-lab/#step-3-create-the-extension-structure","title":"Step 3: Create the Extension Structure","text":"<p>Your extension will need several key components:</p> <ol> <li>Document Loader: To read and process your documentation</li> <li>Text Splitter: To break documents into manageable chunks</li> <li>Embedding Generator: To create vector representations of text</li> <li>Vector Store: To store and query embeddings</li> <li>Retriever: To find relevant information based on queries</li> <li>Copilot Interceptor: To augment Copilot's responses</li> </ol>"},{"location":"rag-extension-lab/#step-4-implement-the-rag-pipeline","title":"Step 4: Implement the RAG Pipeline","text":"<p>The detailed implementation will be covered in the workshop, but here's a high-level overview:</p> <pre><code>// Sample code structure (to be implemented during the workshop)\nimport * as vscode from 'vscode';\nimport { Document } from 'langchain/document';\nimport { OpenAIEmbeddings } from 'langchain/embeddings/openai';\nimport { RecursiveCharacterTextSplitter } from 'langchain/text_splitter';\nimport { MemoryVectorStore } from 'langchain/vectorstores/memory';\n\n// Document loading and processing\nasync function loadDocuments(paths: string[]): Promise&lt;Document[]&gt; {\n  // Implementation to be added during workshop\n}\n\n// Create embeddings and vector store\nasync function createVectorStore(documents: Document[]): Promise&lt;MemoryVectorStore&gt; {\n  // Implementation to be added during workshop\n}\n\n// Query the vector store\nasync function queryKnowledgeBase(query: string, vectorStore: MemoryVectorStore): Promise&lt;string&gt; {\n  // Implementation to be added during workshop\n}\n\n// Intercept and augment Copilot Chat\nfunction interceptCopilotChat() {\n  // Implementation to be added during workshop\n}\n</code></pre>"},{"location":"rag-extension-lab/#step-5-test-your-extension","title":"Step 5: Test Your Extension","text":"<p>You'll learn how to test your extension with: - Sample documentation - Various query types - Different retrieval strategies</p>"},{"location":"rag-extension-lab/#step-6-package-and-share-your-extension","title":"Step 6: Package and Share Your Extension","text":"<p>Finally, you'll package your extension for distribution:</p> <pre><code># Package the extension\nvscode-dev-tools package\n\n# This creates a .vsix file that can be installed in VS Code\n</code></pre>"},{"location":"rag-extension-lab/#expected-outcomes","title":"Expected Outcomes \ud83c\udf89","text":"<p>By the end of this lab, you'll have: - A working RAG extension for GitHub Copilot Chat - The ability to connect Copilot to your own knowledge base - A deeper understanding of how RAG systems work - Skills to further customize and enhance the extension</p>"},{"location":"rag-extension-lab/#resources-for-further-learning","title":"Resources for Further Learning \ud83d\udcda","text":"<ul> <li>VS Code Extension API Documentation</li> <li>LangChain Documentation</li> <li>GitHub Copilot Extension API</li> <li>RAG Architecture Patterns</li> </ul>"},{"location":"rag-extension-lab/#coming-soon","title":"Coming Soon! \ud83d\udd1c","text":"<p>This hands-on lab is currently under development and will be available in the next workshop update. Stay tuned for the complete implementation guide!</p> <p>In the meantime, you can prepare by: 1. Familiarizing yourself with VS Code extension development 2. Learning about vector embeddings and semantic search 3. Exploring the LangChain framework 4. Gathering documentation you'd like to use with your RAG system</p> <p>We're excited to guide you through building this powerful extension in the upcoming workshop! \ud83d\ude80</p>"},{"location":"train-the-trainer/","title":"Train the Trainer Guide \ud83d\udc68\u200d\ud83c\udfeb","text":"<p>This guide is designed to help trainers deliver an effective GitHub Copilot workshop. It provides a structured approach to ensure all critical topics and hands-on activities are covered within the workshop timeframe.</p>"},{"location":"train-the-trainer/#workshop-checklist","title":"Workshop Checklist \u2705","text":""},{"location":"train-the-trainer/#welcome-introduction-10-min","title":"Welcome &amp; Introduction (10 min) \ud83c\udf89","text":"<ul> <li>Welcome participants</li> <li>Introduce the workshop agenda, objectives, and outcomes</li> <li>Briefly introduce GitHub Copilot and its importance</li> </ul>"},{"location":"train-the-trainer/#overview-of-github-copilot-20-min","title":"Overview of GitHub Copilot (20 min) \ud83e\udd16","text":"<ul> <li>What is GitHub Copilot?</li> <li>How does it work?</li> <li>Benefits and use cases</li> <li>Provide reference to GitHub Copilot Documentation</li> </ul>"},{"location":"train-the-trainer/#setting-up-github-copilot-30-min","title":"Setting Up GitHub Copilot (30 min) \u2699\ufe0f","text":"<ul> <li>Step-by-step installation guide</li> <li>Configuration steps</li> <li>Troubleshooting common issues</li> <li>Live demo of setup</li> <li>Provide reference to GitHub Copilot Setup Guide</li> </ul>"},{"location":"train-the-trainer/#break-10-min","title":"Break (10 min) \u2615","text":""},{"location":"train-the-trainer/#hands-on-session-1-basic-usage-30-min","title":"Hands-on Session 1: Basic Usage (30 min) \ud83d\udcbb","text":"<ul> <li>Practical exercises on basic usage:</li> <li>Code completion</li> <li>Suggestions</li> <li>Basic commands</li> <li>Provide sample code repositories and exercise sheets</li> </ul>"},{"location":"train-the-trainer/#advanced-features-of-github-copilot-20-min","title":"Advanced Features of GitHub Copilot (20 min) \ud83d\ude80","text":"<ul> <li>Context-aware suggestions</li> <li>Multi-language support</li> <li>Integration with other tools</li> <li>Live demo</li> </ul>"},{"location":"train-the-trainer/#break-10-min_1","title":"Break (10 min) \ud83c\udf6a","text":""},{"location":"train-the-trainer/#hands-on-session-2-advanced-usage-60-min","title":"Hands-on Session 2: Advanced Usage (60 min) \ud83d\udd27","text":"<ul> <li>Practical exercises on advanced usage:</li> <li>Refactoring</li> <li>Generating complex code</li> <li>Using Copilot with different languages</li> <li>Provide sample projects and exercise sheets</li> </ul>"},{"location":"train-the-trainer/#best-practices-and-limitations-20-min","title":"Best Practices and Limitations (20 min) \ud83d\udcdd","text":"<ul> <li>Discuss best practices for using GitHub Copilot</li> <li>Understanding its limitations</li> </ul>"},{"location":"train-the-trainer/#break-10-min_2","title":"Break (10 min) \ud83e\uddc3","text":""},{"location":"train-the-trainer/#qa-and-workshop-feedback-30-min","title":"Q&amp;A and Workshop Feedback (30 min) \ud83d\udcac","text":"<ul> <li>Open Q&amp;A session</li> <li>Gather feedback on the workshop</li> <li>Discuss improvements and suggestions</li> </ul>"},{"location":"train-the-trainer/#trainer-tips","title":"Trainer Tips \ud83d\udca1","text":"<ol> <li>Preparation: Familiarize yourself with all hands-on labs before the workshop</li> <li>Timing: Be mindful of time - have a timer visible to keep track</li> <li>Technical Issues: Prepare for common technical issues participants might face</li> <li>Engagement: Encourage questions and participation throughout the session</li> <li>Examples: Have real-world examples ready to demonstrate the value of GitHub Copilot</li> <li>Flexibility: Be prepared to adjust the pace based on the group's progress</li> <li>Follow-up: Provide resources for participants to continue learning after the workshop</li> </ol>"},{"location":"train-the-trainer/#resources-for-trainers","title":"Resources for Trainers \ud83d\udcda","text":"<ul> <li>GitHub Copilot Documentation</li> <li>GitHub Copilot for Business</li> <li>GitHub Copilot Trust Center</li> <li>GitHub Copilot Research Paper</li> </ul> <p>Remember, the goal is not just to teach the technical aspects of GitHub Copilot, but to inspire participants to incorporate AI-assisted coding into their development workflow! \ud83c\udf1f</p>"},{"location":"workshop-overview/","title":"Workshop Overview \ud83d\udd0d","text":"<p>This workshop is designed to provide a comprehensive introduction to GitHub Copilot and its capabilities. Whether you're a beginner or an experienced developer, this workshop will help you understand how to leverage AI-assisted coding to enhance your development workflow.</p>"},{"location":"workshop-overview/#workshop-structure","title":"Workshop Structure \ud83d\udccb","text":"<p>The workshop is flexible and can be conducted in either a 2-hour or 4-hour format, depending on your needs and time constraints. The content is organized to provide a progressive learning experience, starting with the basics and moving on to more advanced topics.</p>"},{"location":"workshop-overview/#workshop-formats","title":"Workshop Formats \u23f1\ufe0f","text":""},{"location":"workshop-overview/#2-hour-workshop","title":"2-Hour Workshop","text":"<p>The 2-hour workshop focuses on: - Introduction to GitHub Copilot - Basic setup and configuration - Hands-on experience with 1-2 selected labs - Key best practices and tips</p>"},{"location":"workshop-overview/#4-hour-workshop","title":"4-Hour Workshop","text":"<p>The 4-hour workshop includes everything in the 2-hour format, plus: - More in-depth exploration of GitHub Copilot features - Additional hands-on labs - Advanced usage scenarios - Extended Q&amp;A and discussion</p>"},{"location":"workshop-overview/#hands-on-labs","title":"Hands-On Labs \ud83e\uddea","text":"<p>Our workshop includes a variety of hands-on labs to give you practical experience with GitHub Copilot across different programming languages and scenarios:</p> Name Language Description Length Javascript Calculator HTML/Javascript A small app that serves as a good starter project 20 mins Rock Paper Scissor Python A slightly more advanced app 45 mins Polaroid Image Gallery HTML/Javascript Building a small image gallery with animations 45 mins Star Wars API Client Java Creating a library to retrieve Star Wars character data 1 hour Restaurant API + Deployment Python/Azure Creating and deploying a simple API to Azure 45 mins C Sharp Web App C# Working with .NET Web Technologies and unit tests 1 hour Timer and Selector HTML, CSS, React Building components for workshop trainers 30 mins Interest Calculator C++ Building an interest calculator with unit tests 30 mins API Testing with SWAPI C# Implementing tests for an API 30 mins"},{"location":"workshop-overview/#learning-objectives","title":"Learning Objectives \ud83c\udfaf","text":"<p>By the end of this workshop, participants will be able to:</p> <ol> <li>Understand how GitHub Copilot works and its capabilities</li> <li>Configure and use GitHub Copilot effectively in their development environment</li> <li>Apply best practices for working with AI-assisted coding</li> <li>Use GitHub Copilot across different programming languages and scenarios</li> <li>Identify opportunities to improve productivity with AI assistance</li> </ol> <p>Let's embark on this exciting journey to explore the future of coding with GitHub Copilot! \ud83d\ude80</p>"},{"location":"hands-on/","title":"Hands-on Labs Overview \ud83e\uddea","text":"<p>Welcome to the hands-on labs section of our GitHub Copilot workshop! This is where you'll get practical experience using GitHub Copilot across different programming languages and scenarios.</p>"},{"location":"hands-on/#available-labs","title":"Available Labs \ud83d\udccb","text":"<p>Our workshop includes a variety of hands-on labs to give you practical experience with GitHub Copilot:</p> Name Language Description Length Javascript Calculator HTML/Javascript A small app that serves as a good starter project 20 mins Rock Paper Scissor Python A slightly more advanced app 45 mins Polaroid Image Gallery HTML/Javascript Building a small image gallery with animations 45 mins Star Wars API Client Java Creating a library to retrieve Star Wars character data 1 hour Restaurant API + Deployment Python/Azure Creating and deploying a simple API to Azure 45 mins C Sharp Web App C# Working with .NET Web Technologies and unit tests 1 hour Timer and Selector HTML, CSS, React Building components for workshop trainers 30 mins Interest Calculator C++ Building an interest calculator with unit tests 30 mins API Testing with SWAPI C# Implementing tests for an API 30 mins"},{"location":"hands-on/#how-to-use-these-labs","title":"How to Use These Labs \ud83c\udf93","text":"<p>Each lab is designed to be self-contained and includes:</p> <ol> <li>Clear Instructions: Step-by-step guidance on what to do</li> <li>Prompts for GitHub Copilot: Suggestions on how to interact with Copilot</li> <li>Expected Outcomes: What you should achieve by the end of the lab</li> <li>Tips and Solutions: Help if you get stuck</li> </ol>"},{"location":"hands-on/#choosing-the-right-lab","title":"Choosing the Right Lab \ud83c\udfaf","text":"<p>If you're new to GitHub Copilot, we recommend starting with: - Javascript Calculator (for web developers) - Rock Paper Scissor (for Python developers)</p> <p>For more experienced users, try: - Star Wars API Client (for Java developers) - C Sharp Web App (for .NET developers)</p>"},{"location":"hands-on/#featured-labs","title":"Featured Labs \ud83c\udf1f","text":"<p>In this workshop, we'll be focusing on two labs in particular:</p>"},{"location":"hands-on/#html-image-gallery","title":"HTML Image Gallery \ud83d\uddbc\ufe0f","text":"<p>Build an interactive image gallery with animations using HTML, CSS, and JavaScript. This lab demonstrates how GitHub Copilot can help with front-end development tasks.</p>"},{"location":"hands-on/#star-wars-api-client","title":"Star Wars API Client \ud83d\ude80","text":"<p>Create a Java client for the Star Wars API, including DTOs, interfaces, implementations, and tests. This lab showcases GitHub Copilot's ability to understand and implement complex API interactions.</p> <p>Choose a lab that matches your interests and skill level, and let's start coding with GitHub Copilot! \ud83d\udcbb</p>"},{"location":"hands-on/html-gallery/","title":"HTML Image Gallery Lab \ud83d\uddbc\ufe0f","text":"<p>In this hands-on lab, you'll build an interactive image gallery with animations using HTML, CSS, and JavaScript with the help of GitHub Copilot! This lab demonstrates how GitHub Copilot can assist with front-end development tasks.</p>"},{"location":"hands-on/html-gallery/#lab-overview","title":"Lab Overview \ud83d\udccb","text":"<p>Duration: 45 minutes Difficulty: Beginner-Intermediate Prerequisites: Basic knowledge of HTML, CSS, and JavaScript  </p>"},{"location":"hands-on/html-gallery/#what-youll-build","title":"What You'll Build \ud83c\udfd7\ufe0f","text":"<p>A beautiful polaroid-style image gallery with the following features: - Grid layout for displaying images - Hover effects with opacity changes - Rotation animations on hover - Click functionality to remove images</p>"},{"location":"hands-on/html-gallery/#getting-started","title":"Getting Started \ud83d\ude80","text":""},{"location":"hands-on/html-gallery/#step-1-create-a-basic-html-structure","title":"Step 1: Create a Basic HTML Structure","text":"<p>First, let's create a basic HTML structure for our page. Open a new file in your editor and ask GitHub Copilot to help you create a basic HTML structure.</p> <p>\ud83d\udca1 Copilot Tip: Try typing a comment like <code>&lt;!-- very basic structure of a modern html page with head body etc --&gt;</code> and let Copilot generate the initial HTML structure.</p> <p>Your initial HTML should look something like this:</p> <pre><code>&lt;!-- very basic structure of a modern html page with head body etc --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;My First HTML Page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hello World!&lt;/h1&gt;\n    &lt;p&gt;This is my first HTML page.&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"hands-on/html-gallery/#step-2-add-an-image-gallery","title":"Step 2: Add an Image Gallery","text":"<p>Now, let's add an image gallery to our page. We'll use GitHub Copilot to help us create a grid of images.</p> <p>\ud83d\udca1 Copilot Tip: Add a comment describing what you want to create, such as <code>&lt;!-- image gallery using random images from the picsum page. For further styling already add appropriate classes. All images should have the same width and height --&gt;</code></p> <p>After Copilot generates the code, your HTML should include something like:</p> <pre><code>&lt;!-- image gallery using random images from the picsum page. For further styling already add appropriate classes. All images should have the same width and height --&gt;\n&lt;div class=\"gallery\"&gt;\n  &lt;img src=\"https://picsum.photos/200/200\" alt=\"image 1\"&gt;\n  &lt;img src=\"https://picsum.photos/200/200\" alt=\"image 2\"&gt;\n  &lt;img src=\"https://picsum.photos/200/200\" alt=\"image 3\"&gt;\n  &lt;img src=\"https://picsum.photos/200/200\" alt=\"image 4\"&gt;\n  &lt;img src=\"https://picsum.photos/200/200\" alt=\"image 5\"&gt;\n  &lt;img src=\"https://picsum.photos/200/200\" alt=\"image 6\"&gt;\n  &lt;img src=\"https://picsum.photos/200/200\" alt=\"image 7\"&gt;\n  &lt;img src=\"https://picsum.photos/200/200\" alt=\"image 8\"&gt;\n  &lt;img src=\"https://picsum.photos/200/200\" alt=\"image 9\"&gt;\n  &lt;img src=\"https://picsum.photos/200/200\" alt=\"image 10\"&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"hands-on/html-gallery/#step-3-style-the-gallery-with-css","title":"Step 3: Style the Gallery with CSS","text":"<p>Let's add some CSS to style our gallery. We'll create a grid layout and add some basic styling to the images.</p> <p>\ud83d\udca1 Copilot Tip: Add a style tag in the head section and add a comment describing the styling you want to create.</p> <p>Add this to your head section:</p> <pre><code>&lt;style&gt;\n  /* Gallery grid layout */\n  .gallery {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-gap: 10px;\n    justify-content: center;\n    align-items: center;\n    margin: 0 auto;\n    width: 600px;\n    position: relative;\n  }\n  /* Image styles */\n  .gallery img {\n    width: 200px;\n    height: 200px;\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\n    border: 15px solid white;\n    border-radius: 5px;\n    transition: opacity 0.5s, transform 0.5s;\n  }\n&lt;/style&gt;\n</code></pre>"},{"location":"hands-on/html-gallery/#step-4-add-hover-effects","title":"Step 4: Add Hover Effects","text":"<p>Now, let's add some hover effects to make our gallery more interactive.</p> <p>\ud83d\udca1 Copilot Tip: Add comments describing the hover effects you want to create.</p> <p>Add these styles to your existing style tag:</p> <pre><code>/* Image hover styles */\n.gallery img:hover {\n  box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2);\n  animation: rotate 2s infinite;\n  opacity: 1 !important;\n}\n/* Gallery hover styles */\n.gallery:hover img {\n  opacity: 0.6;\n}\n/* Image rotation animation */\n@keyframes rotate {\n  0%, 100% {\n    transform: rotate(0deg);\n  }\n  50% {\n    transform: rotate(5deg);\n  }\n}\n</code></pre> <p>Refresh your browser to see the opacity effect on the non-hovered images in the gallery. Hover with your mouse over the different images to see the opacity effect.</p>"},{"location":"hands-on/html-gallery/#step-5-add-click-functionality-to-remove-images","title":"Step 5: Add Click Functionality to Remove Images","text":"<p>In this step, you will add JavaScript to remove an image from the gallery when you click on it.</p> <p>\ud83d\udca1 Copilot Tip: Use GitHub Copilot chat to generate the JavaScript code for removing an image from the gallery when you click on it. Remember to have the index.html file open in the editor.</p> <p>You can use the following prompt in the chat: \"I would like to remove an element from the image gallery when clicking on it. Can you return the whole html page with the new added javascript?\"</p> <p>After adding the JavaScript, your complete HTML should look something like this:</p> <pre><code>&lt;!-- very basic structure of a modern html page with head body etc --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;My First HTML Page&lt;/title&gt;\n    &lt;style&gt;\n      /* Gallery grid layout */\n      .gallery {\n        display: grid;\n        grid-template-columns: repeat(3, 1fr);\n        grid-gap: 10px;\n        justify-content: center;\n        align-items: center;\n        margin: 0 auto;\n        width: 600px;\n        position: relative;\n      }\n      /* Image styles */\n      .gallery img {\n        width: 200px;\n        height: 200px;\n        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\n        border: 15px solid white;\n        border-radius: 5px;\n        transition: opacity 0.5s, transform 0.5s;\n      }\n      /* Image hover styles */\n      .gallery img:hover {\n        box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2);\n        animation: rotate 2s infinite;\n        opacity: 1 !important;\n      }\n      /* Gallery hover styles */\n      .gallery:hover img {\n        opacity: 0.6;\n      }\n      .fade-out {\n        opacity: 0;\n        transition: opacity 3s ease-out;\n      }\n      /* Image rotation animation */\n      @keyframes rotate {\n        0%,\n        100% {\n          transform: rotate(0deg);\n        }\n        50% {\n          transform: rotate(5deg);\n        }\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;!-- image gallery using random images from the picsum page. For further styling already add appropriate classes. All images should have the same width and height --&gt;\n    &lt;div class=\"gallery\"&gt;\n      &lt;img src=\"https://picsum.photos/200/200\" alt=\"image 1\"&gt;\n      &lt;img src=\"https://picsum.photos/200/200\" alt=\"image 2\"&gt;\n      &lt;img src=\"https://picsum.photos/200/200\" alt=\"image 3\"&gt;\n      &lt;img src=\"https://picsum.photos/200/200\" alt=\"image 4\"&gt;\n      &lt;img src=\"https://picsum.photos/200/200\" alt=\"image 5\"&gt;\n      &lt;img src=\"https://picsum.photos/200/200\" alt=\"image 6\"&gt;\n      &lt;img src=\"https://picsum.photos/200/200\" alt=\"image 7\"&gt;\n      &lt;img src=\"https://picsum.photos/200/200\" alt=\"image 8\"&gt;\n      &lt;img src=\"https://picsum.photos/200/200\" alt=\"image 9\"&gt;\n      &lt;img src=\"https://picsum.photos/200/200\" alt=\"image 10\"&gt;\n    &lt;/div&gt;\n    &lt;script&gt;\n      // Select all images in the gallery\n      var images = document.querySelectorAll(\".gallery img\");\n      // Add an event listener to each image\n      images.forEach(function (image) {\n        image.addEventListener(\"click\", function (e) {\n          // Remove the image when it's clicked\n          e.target.remove();\n        });\n      });\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>\ud83d\udca1 Copilot Tip: Ask Copilot chat why a script tag can be placed in the body tag: \"Why is it better in this case to place the script tag at the end of the body tag?\"</p>"},{"location":"hands-on/html-gallery/#bonus-challenges","title":"Bonus Challenges \ud83c\udf1f","text":"<p>If you have extra time, try these bonus challenges with GitHub Copilot:</p> <ol> <li>Add a button to reset the gallery (bring back all removed images)</li> <li>Add a fade-out animation before removing the images</li> <li>Add a counter to show how many images are currently displayed</li> <li>Add a filter effect (like grayscale or sepia) on hover</li> </ol>"},{"location":"hands-on/html-gallery/#summary","title":"Summary \ud83d\udcdd","text":"<p>In this lab, you've learned how to: - Use GitHub Copilot to generate HTML, CSS, and JavaScript code - Create an interactive image gallery with hover effects and animations - Implement click functionality to remove elements from the DOM - Use GitHub Copilot chat to get explanations and improve your code</p> <p>GitHub Copilot has helped you write code faster and with less effort, allowing you to focus on the creative aspects of your project rather than the implementation details. This is just a small example of how AI-assisted coding can enhance your development workflow! \ud83d\ude80</p>"},{"location":"hands-on/other-labs/","title":"Other Hands-on Labs \ud83e\udde9","text":"<p>In addition to our featured HTML Image Gallery and Star Wars API labs, the GitHub Copilot workshop includes several other hands-on labs that demonstrate the capabilities of GitHub Copilot across different programming languages and scenarios.</p>"},{"location":"hands-on/other-labs/#available-labs","title":"Available Labs \ud83d\udccb","text":"Name Language Description Length Javascript Calculator HTML/Javascript A small app that serves as a good starter project 20 mins Rock Paper Scissor Python A slightly more advanced app 45 mins Restaurant API + Deployment Python/Azure Creating and deploying a simple API to Azure 45 mins C Sharp Web App C# Working with .NET Web Technologies and unit tests 1 hour Timer and Selector HTML, CSS, React Building components for workshop trainers 30 mins Interest Calculator C++ Building an interest calculator with unit tests 30 mins API Testing with SWAPI C# Implementing tests for an API 30 mins"},{"location":"hands-on/other-labs/#external-lab-resources","title":"External Lab Resources \ud83d\udd17","text":"<p>These labs are hosted in separate repositories. Click on the links below to access them:</p>"},{"location":"hands-on/other-labs/#javascript-calculator","title":"Javascript Calculator \u2797","text":"<p>Duration: 20 minutes Description: A small app provided by GitHub that serves as a good starter project for beginners. Link: Instructions</p>"},{"location":"hands-on/other-labs/#rock-paper-scissors","title":"Rock Paper Scissors \u2702\ufe0f","text":"<p>Duration: 45 minutes Description: A slightly more advanced app provided by GitHub that demonstrates more complex interactions. Link: Instructions</p>"},{"location":"hands-on/other-labs/#restaurant-api-deployment","title":"Restaurant API + Deployment \ud83c\udf7d\ufe0f","text":"<p>Duration: 45 minutes Description: Create a simple API and deploy it to Azure Container Apps. Link: Instructions</p>"},{"location":"hands-on/other-labs/#c-sharp-web-app","title":"C Sharp Web App \ud83c\udf10","text":"<p>Duration: 1 hour Description: GitHub Copilot repository for the Business Hackathon with .NET Web Technologies (C# ASP.NET / Blazor and Unittests). Link: Instructions QR Code: </p>"},{"location":"hands-on/other-labs/#timer-and-selector","title":"Timer and Selector \u23f1\ufe0f","text":"<p>Duration: 30 minutes Description: Build a website for trainers that includes components like a timer for breaks and a selector for choosing participants. Link: Instructions QR Code: </p>"},{"location":"hands-on/other-labs/#interest-calculator","title":"Interest Calculator \ud83d\udcb0","text":"<p>Duration: 30 minutes Description: Build an interest calculator together with a unit test in C++. Link: Instructions QR Code: </p>"},{"location":"hands-on/other-labs/#api-testing-with-swapi","title":"API Testing with SWAPI \ud83e\uddea","text":"<p>Duration: 30 minutes Description: Implement tests to test the Star Wars API. Link: Instructions QR Code: </p>"},{"location":"hands-on/other-labs/#how-to-choose-a-lab","title":"How to Choose a Lab \ud83e\udd14","text":"<p>When selecting a lab for your workshop, consider:</p> <ol> <li>Audience Experience Level: Choose labs that match the programming experience of your participants</li> <li>Available Time: Select labs that fit within your workshop timeframe</li> <li>Programming Language Preference: Pick labs that use languages familiar to your audience</li> <li>Learning Objectives: Select labs that demonstrate the specific GitHub Copilot features you want to highlight</li> </ol>"},{"location":"hands-on/other-labs/#tips-for-running-labs-successfully","title":"Tips for Running Labs Successfully \ud83d\udca1","text":"<ol> <li>Pre-workshop Setup: Ensure all participants have GitHub Copilot access before the workshop</li> <li>Environment Check: Verify that participants have the necessary development environments set up</li> <li>Pair Programming: Consider having participants work in pairs for more collaborative learning</li> <li>Time Management: Set clear timeboxes for each section of the lab</li> <li>Checkpoints: Establish checkpoints throughout the lab to ensure everyone is progressing</li> <li>Assistance: Have additional facilitators available to help participants who get stuck</li> <li>Wrap-up Discussion: After each lab, discuss what was learned and how GitHub Copilot helped</li> </ol> <p>Happy coding with GitHub Copilot! \ud83d\ude80</p>"},{"location":"hands-on/starwars-api/","title":"Star Wars API Client Lab \ud83d\ude80","text":"<p>In this hands-on lab, you'll build a Java client for the Star Wars API (SWAPI) with the help of GitHub Copilot! This lab demonstrates how GitHub Copilot can assist with creating DTOs, interfaces, implementations, and tests.</p>"},{"location":"hands-on/starwars-api/#lab-overview","title":"Lab Overview \ud83d\udccb","text":"<p>Duration: 1 hour Difficulty: Intermediate Prerequisites: Basic knowledge of Java, REST APIs, and unit testing  </p>"},{"location":"hands-on/starwars-api/#what-youll-build","title":"What You'll Build \ud83c\udfd7\ufe0f","text":"<p>A Java client for the Star Wars API with the following components: - Data Transfer Objects (DTOs) to represent Star Wars characters - An interface defining the API client methods - An implementation of the interface using Java's HTTP client - Unit tests to verify the functionality</p>"},{"location":"hands-on/starwars-api/#getting-started","title":"Getting Started \ud83d\ude80","text":""},{"location":"hands-on/starwars-api/#step-1-set-up-the-project-structure","title":"Step 1: Set Up the Project Structure","text":"<p>We'll start by setting up a basic Maven project structure. GitHub Copilot will help us create the necessary files and configurations.</p> <p>\ud83d\udca1 Copilot Tip: If you're using an IDE like IntelliJ or VS Code, you can create a new Maven project using the built-in tools. Otherwise, you can use the Maven command-line tools to create a new project.</p> <p>Your project should have the following structure: <pre><code>starwarsapi/\n\u251c\u2500\u2500 pom.xml\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main/\n\u2502   \u2502   \u2514\u2500\u2500 java/\n\u2502   \u2502       \u2514\u2500\u2500 com/\n\u2502   \u2502           \u2514\u2500\u2500 mycompany/\n\u2502   \u2502               \u2514\u2500\u2500 app/\n\u2502   \u2502                   \u251c\u2500\u2500 App.java\n\u2502   \u2502                   \u251c\u2500\u2500 StarWarsAPI.java\n\u2502   \u2502                   \u251c\u2500\u2500 StarWarsAPIImpl.java\n\u2502   \u2502                   \u2514\u2500\u2500 StarWarsCharacterDTO.java\n\u2502   \u2514\u2500\u2500 test/\n\u2502       \u2514\u2500\u2500 java/\n\u2502           \u2514\u2500\u2500 com/\n\u2502               \u2514\u2500\u2500 mycompany/\n\u2502                   \u2514\u2500\u2500 app/\n\u2502                       \u251c\u2500\u2500 AppTest.java\n\u2502                       \u2514\u2500\u2500 StarWarsAPITest.java\n</code></pre></p>"},{"location":"hands-on/starwars-api/#step-2-create-the-maven-pom-file","title":"Step 2: Create the Maven POM File","text":"<p>Let's start by creating a <code>pom.xml</code> file with the necessary dependencies.</p> <p>\ud83d\udca1 Copilot Tip: Ask GitHub Copilot to help you create a Maven POM file with dependencies for HTTP client and JSON parsing.</p> <p>Your <code>pom.xml</code> should look something like this:</p> <pre><code>&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"&gt;\n  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n  &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;\n  &lt;artifactId&gt;starwarsapi&lt;/artifactId&gt;\n  &lt;packaging&gt;jar&lt;/packaging&gt;\n  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n  &lt;name&gt;starwarsapi&lt;/name&gt;\n  &lt;url&gt;http://maven.apache.org&lt;/url&gt;\n  &lt;properties&gt;\n    &lt;maven.compiler.source&gt;11&lt;/maven.compiler.source&gt;\n    &lt;maven.compiler.target&gt;11&lt;/maven.compiler.target&gt;\n    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n  &lt;/properties&gt;\n  &lt;dependencies&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;junit&lt;/groupId&gt;\n      &lt;artifactId&gt;junit&lt;/artifactId&gt;\n      &lt;version&gt;4.13.2&lt;/version&gt;\n      &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n      &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;\n      &lt;version&gt;2.13.0&lt;/version&gt;\n    &lt;/dependency&gt;\n  &lt;/dependencies&gt;\n&lt;/project&gt;\n</code></pre>"},{"location":"hands-on/starwars-api/#step-3-create-the-data-transfer-object-dto","title":"Step 3: Create the Data Transfer Object (DTO)","text":"<p>Now, let's create a DTO to represent a Star Wars character.</p> <p>\ud83d\udca1 Copilot Tip: Create a new file called <code>StarWarsCharacterDTO.java</code> and add a comment describing what you want to create.</p> <pre><code>package com.mycompany.app;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonProperty;\n\n/**\n * Data Transfer Object for Star Wars character from SWAPI\n */\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class StarWarsCharacterDTO {\n    private String name;\n    private String height;\n    private String mass;\n    @JsonProperty(\"hair_color\")\n    private String hairColor;\n    @JsonProperty(\"skin_color\")\n    private String skinColor;\n    @JsonProperty(\"eye_color\")\n    private String eyeColor;\n    @JsonProperty(\"birth_year\")\n    private String birthYear;\n    private String gender;\n    private String homeworld;\n    private String[] films;\n    private String[] species;\n    private String[] vehicles;\n    private String[] starships;\n    private String created;\n    private String edited;\n    private String url;\n\n    // Getters and setters\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getHeight() {\n        return height;\n    }\n\n    public void setHeight(String height) {\n        this.height = height;\n    }\n\n    public String getMass() {\n        return mass;\n    }\n\n    public void setMass(String mass) {\n        this.mass = mass;\n    }\n\n    public String getHairColor() {\n        return hairColor;\n    }\n\n    public void setHairColor(String hairColor) {\n        this.hairColor = hairColor;\n    }\n\n    public String getSkinColor() {\n        return skinColor;\n    }\n\n    public void setSkinColor(String skinColor) {\n        this.skinColor = skinColor;\n    }\n\n    public String getEyeColor() {\n        return eyeColor;\n    }\n\n    public void setEyeColor(String eyeColor) {\n        this.eyeColor = eyeColor;\n    }\n\n    public String getBirthYear() {\n        return birthYear;\n    }\n\n    public void setBirthYear(String birthYear) {\n        this.birthYear = birthYear;\n    }\n\n    public String getGender() {\n        return gender;\n    }\n\n    public void setGender(String gender) {\n        this.gender = gender;\n    }\n\n    public String getHomeworld() {\n        return homeworld;\n    }\n\n    public void setHomeworld(String homeworld) {\n        this.homeworld = homeworld;\n    }\n\n    public String[] getFilms() {\n        return films;\n    }\n\n    public void setFilms(String[] films) {\n        this.films = films;\n    }\n\n    public String[] getSpecies() {\n        return species;\n    }\n\n    public void setSpecies(String[] species) {\n        this.species = species;\n    }\n\n    public String[] getVehicles() {\n        return vehicles;\n    }\n\n    public void setVehicles(String[] vehicles) {\n        this.vehicles = vehicles;\n    }\n\n    public String[] getStarships() {\n        return starships;\n    }\n\n    public void setStarships(String[] starships) {\n        this.starships = starships;\n    }\n\n    public String getCreated() {\n        return created;\n    }\n\n    public void setCreated(String created) {\n        this.created = created;\n    }\n\n    public String getEdited() {\n        return edited;\n    }\n\n    public void setEdited(String edited) {\n        this.edited = edited;\n    }\n\n    public String getUrl() {\n        return url;\n    }\n\n    public void setUrl(String url) {\n        this.url = url;\n    }\n}\n</code></pre>"},{"location":"hands-on/starwars-api/#step-4-create-the-api-interface","title":"Step 4: Create the API Interface","text":"<p>Let's create an interface that defines the methods our Star Wars API client will implement.</p> <p>\ud83d\udca1 Copilot Tip: Create a new file called <code>StarWarsAPI.java</code> and add a comment describing what you want to create.</p> <pre><code>package com.mycompany.app;\n\nimport java.io.IOException;\n\n/**\n * Interface for Star Wars API client\n */\npublic interface StarWarsAPI {\n    /**\n     * Get Luke Skywalker's information\n     * @return StarWarsCharacterDTO with Luke Skywalker's data\n     * @throws IOException if an I/O error occurs\n     * @throws InterruptedException if the operation is interrupted\n     */\n    StarWarsCharacterDTO getLukeSkywalker() throws IOException, InterruptedException;\n\n    /**\n     * Get Darth Vader's information\n     * @return StarWarsCharacterDTO with Darth Vader's data\n     * @throws IOException if an I/O error occurs\n     * @throws InterruptedException if the operation is interrupted\n     */\n    StarWarsCharacterDTO getDarthVader() throws IOException, InterruptedException;\n}\n</code></pre>"},{"location":"hands-on/starwars-api/#step-5-implement-the-api-interface","title":"Step 5: Implement the API Interface","text":"<p>Now, let's implement the interface using Java's HTTP client.</p> <p>\ud83d\udca1 Copilot Tip: Create a new file called <code>StarWarsAPIImpl.java</code> and add a comment describing what you want to create.</p> <pre><code>package com.mycompany.app;\n\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.io.IOException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\n/**\n * Implementation of the Star Wars API client\n */\npublic class StarWarsAPIImpl implements StarWarsAPI {\n    private HttpClient client;\n\n    public StarWarsAPIImpl() {\n        this.client = HttpClient.newBuilder()\n            .followRedirects(HttpClient.Redirect.ALWAYS)\n            .build();\n    }\n\n    @Override\n    public StarWarsCharacterDTO getLukeSkywalker() throws IOException, InterruptedException {\n        String url = \"https://swapi.dev/api/people/1/\";\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(URI.create(url))\n            .build();\n\n        HttpResponse&lt;String&gt; response = client.send(request, HttpResponse.BodyHandlers.ofString());\n\n        ObjectMapper mapper = new ObjectMapper();\n        return mapper.readValue(response.body(), StarWarsCharacterDTO.class);\n    }\n\n    @Override\n    public StarWarsCharacterDTO getDarthVader() throws IOException, InterruptedException {\n        String url = \"https://swapi.dev/api/people/4/\";\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(URI.create(url))\n            .build();\n\n        HttpResponse&lt;String&gt; response = client.send(request, HttpResponse.BodyHandlers.ofString());\n\n        ObjectMapper mapper = new ObjectMapper();\n        return mapper.readValue(response.body(), StarWarsCharacterDTO.class);\n    }\n}\n</code></pre>"},{"location":"hands-on/starwars-api/#step-6-create-a-simple-app-class","title":"Step 6: Create a Simple App Class","text":"<p>Let's create a simple application class to demonstrate the API client.</p> <p>\ud83d\udca1 Copilot Tip: Create a new file called <code>App.java</code> and add a comment describing what you want to create.</p> <pre><code>package com.mycompany.app;\n\nimport java.io.IOException;\n\n/**\n * Main application class\n */\npublic class App {\n    public static void main(String[] args) {\n        System.out.println(\"Star Wars API Client\");\n\n        StarWarsAPI api = new StarWarsAPIImpl();\n\n        try {\n            System.out.println(\"Getting Luke Skywalker's information...\");\n            StarWarsCharacterDTO luke = api.getLukeSkywalker();\n            System.out.println(\"Name: \" + luke.getName());\n            System.out.println(\"Height: \" + luke.getHeight() + \" cm\");\n            System.out.println(\"Mass: \" + luke.getMass() + \" kg\");\n            System.out.println(\"Hair color: \" + luke.getHairColor());\n            System.out.println(\"Eye color: \" + luke.getEyeColor());\n\n            System.out.println(\"\\nGetting Darth Vader's information...\");\n            StarWarsCharacterDTO vader = api.getDarthVader();\n            System.out.println(\"Name: \" + vader.getName());\n            System.out.println(\"Height: \" + vader.getHeight() + \" cm\");\n            System.out.println(\"Mass: \" + vader.getMass() + \" kg\");\n            System.out.println(\"Hair color: \" + vader.getHairColor());\n            System.out.println(\"Eye color: \" + vader.getEyeColor());\n        } catch (IOException | InterruptedException e) {\n            System.err.println(\"Error: \" + e.getMessage());\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre>"},{"location":"hands-on/starwars-api/#step-7-create-unit-tests","title":"Step 7: Create Unit Tests","text":"<p>Let's create unit tests to verify that our API client works correctly.</p> <p>\ud83d\udca1 Copilot Tip: Create a new file called <code>StarWarsAPITest.java</code> and add a comment describing what you want to create.</p> <pre><code>package com.mycompany.app;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport java.io.IOException;\n\n/**\n * Unit tests for the Star Wars API client\n */\npublic class StarWarsAPITest {\n    @Test\n    public void testGetLukeSkywalker() {\n        StarWarsAPI starWarsAPI = new StarWarsAPIImpl();\n        try {\n            StarWarsCharacterDTO lukeSkywalker = starWarsAPI.getLukeSkywalker();\n            assertNotNull(lukeSkywalker);\n            // Check if the name of Luke Skywalker is correct\n            assertEquals(\"Luke Skywalker\", lukeSkywalker.getName());\n            // Check if the height of Luke Skywalker is correct\n            assertEquals(\"172\", lukeSkywalker.getHeight());\n        } catch (IOException | InterruptedException e) {\n            fail(\"IOException occurred: \" + e.getMessage());\n        }\n    }\n\n    // Test the getDarthVader method\n    @Test\n    public void testGetDarthVader() {\n        StarWarsAPI starWarsAPI = new StarWarsAPIImpl();\n        try {\n            StarWarsCharacterDTO darthVader = starWarsAPI.getDarthVader();\n            assertNotNull(darthVader);\n            // Check if the name of Darth Vader is correct\n            assertEquals(\"Darth Vader\", darthVader.getName());\n            // Check if the height of Darth Vader is correct\n            assertEquals(\"202\", darthVader.getHeight());\n        } catch (IOException | InterruptedException e) {\n            fail(\"IOException occurred: \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"hands-on/starwars-api/#step-8-refactor-the-api-implementation","title":"Step 8: Refactor the API Implementation","text":"<p>There's a lot of duplicated code in the <code>getLukeSkywalker</code> and <code>getDarthVader</code> methods. Let's refactor the code to extract the common code into a new private method.</p> <p>\ud83d\udca1 Copilot Tip: Use GitHub Copilot chat to help you refactor the <code>StarWarsAPIImpl</code> class. You can use a prompt like: \"Can you help me refactoring this class to use a private method getStarWarsCharacter to retrieve the payloads and avoid duplicated code in the different methods. I want to provide an Id to the private method.\"</p> <p>After refactoring, your <code>StarWarsAPIImpl.java</code> file should look like this:</p> <pre><code>package com.mycompany.app;\n\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.io.IOException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\n/**\n * Implementation of the Star Wars API client\n */\npublic class StarWarsAPIImpl implements StarWarsAPI {\n    private HttpClient client;\n\n    public StarWarsAPIImpl() {\n        this.client = HttpClient.newBuilder()\n            .followRedirects(HttpClient.Redirect.ALWAYS)\n            .build();\n    }\n\n    @Override\n    public StarWarsCharacterDTO getLukeSkywalker() throws IOException, InterruptedException {\n        return getStarWarsCharacter(1);\n    }\n\n    @Override\n    public StarWarsCharacterDTO getDarthVader() throws IOException, InterruptedException {\n        return getStarWarsCharacter(4);\n    }\n\n    private StarWarsCharacterDTO getStarWarsCharacter(int id) throws IOException, InterruptedException {\n        String url = \"https://swapi.dev/api/people/\" + id + \"/\";\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(URI.create(url))\n            .build();\n\n        HttpResponse&lt;String&gt; response = client.send(request, HttpResponse.BodyHandlers.ofString());\n\n        ObjectMapper mapper = new ObjectMapper();\n        return mapper.readValue(response.body(), StarWarsCharacterDTO.class);\n    }\n}\n</code></pre>"},{"location":"hands-on/starwars-api/#step-9-run-the-tests","title":"Step 9: Run the Tests","text":"<p>Run the tests to make sure everything is working as expected.</p> <p>\ud83d\udca1 Copilot Tip: Use the Maven command <code>mvn test</code> to run the tests.</p> <p>If everything is set up correctly, the tests should pass, indicating that your Star Wars API client is working properly.</p>"},{"location":"hands-on/starwars-api/#bonus-challenges","title":"Bonus Challenges \ud83c\udf1f","text":"<p>If you have extra time, try these bonus challenges with GitHub Copilot:</p> <ol> <li>Add a method to get information about a character by name (hint: you'll need to use the search endpoint)</li> <li>Add a method to get information about a planet</li> <li>Add a method to get all characters from a specific film</li> <li>Implement caching to avoid making the same API calls repeatedly</li> </ol>"},{"location":"hands-on/starwars-api/#summary","title":"Summary \ud83d\udcdd","text":"<p>In this lab, you've learned how to: - Use GitHub Copilot to create a Java client for a REST API - Create DTOs, interfaces, and implementations - Write unit tests to verify functionality - Refactor code to eliminate duplication</p> <p>GitHub Copilot has helped you write code faster and with less effort, allowing you to focus on the design and architecture rather than the implementation details. This is a great example of how AI-assisted coding can enhance your development workflow, especially when working with external APIs! \ud83d\ude80</p> <p></p>"}]}